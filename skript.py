#!/usr/bin/python3
##
## skript.py - Generates a gnuplot polygon path from a list of points, generated by gnuplot "set tables" 
## 
## Copyright(c) 2017 Kevin Croker
## GPL v3
##
## Adapted from 
##   https://stackoverflow.com/questions/31184103/how-to-improve-the-rendering-of-gradients-and-filled-elements-in-gnuplot
## to handle gnuplot's actual set tables output, with all its bs included.
##
## (Extremely embarassing that this is not fixed 2 years later
## Since filled regions are exactly what most scientists uses in graphing)
##

from __future__ import print_function
import sys
import math

f=open(sys.argv[1], 'r')
dats = []
for line in f:
    if line[0] == "#" or line[0] == "\n":
        continue

    # Otherwise, add it
    dats.append((line.strip()).split())

# Organize it (I'm sure theres a pythonic way to do this)
x = []
y = []
z = []
for dat in dats:
    if not len(dat) > 0:
        continue

    xm = float(dat[0])
    ym = float(dat[1])
    zm = float(dat[2])
    if not math.isnan(xm) and not math.isnan(ym) and not math.isnan(zm):
        x.append(xm)
        y.append(ym)
        z.append(zm)

# Coords?
coords = sys.argv[2]
output = sys.argv[3]

print('%s="' % output, end='')
for i in range(0,len(x)):
    if (i == 0):
        print('from %s {0},{1} '.format(x[i], y[i]) % coords, end='')
    else:
        print('to %s {0},{1} '.format(x[i], y[i]) % coords, end='')
for i in range(len(x)-1,-1,-1):
    print('to %s {0},{1} '.format(x[i], z[i]) % coords, end='')
print('"', end='')
